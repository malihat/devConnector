{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Maliha\\\\Desktop\\\\Udemy Courses\\\\Brad Traversy\\\\DevConnector\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Maliha\\\\Desktop\\\\Udemy Courses\\\\Brad Traversy\\\\DevConnector\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES } from '../actions/types';\nimport { setAlert } from './alert'; // Get posts\n\nexport var getPosts = function getPosts() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get('/api/post');\n\n            case 3:\n              res = _context.sent;\n              dispatch({\n                type: GET_POSTS,\n                payload: res.data\n              });\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: POST_ERROR,\n                payload: {\n                  msg: _context.t0.response.statusText,\n                  status: _context.t0.response.status\n                }\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; // Remove Like\n\nexport var removeLike = function removeLike(postid) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return axios.put(\"/api/post/unlike/\".concat(postid));\n\n            case 3:\n              res = _context2.sent;\n              dispatch({\n                type: UPDATE_LIKES,\n                payload: {\n                  id: id,\n                  likes: res.data\n                }\n              });\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              dispatch({\n                type: POST_ERROR,\n                payload: {\n                  msg: _context2.t0.response.statusText,\n                  status: _context2.t0.response.status\n                }\n              });\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}; // Add Like\n\nexport var addLike = function addLike(postid) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return axios.put(\"/api/post/like/\".concat(postid));\n\n            case 3:\n              res = _context3.sent;\n              dispatch({\n                type: UPDATE_LIKES,\n                payload: {\n                  id: id,\n                  likes: res.data\n                }\n              });\n              _context3.next = 10;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              dispatch({\n                type: POST_ERROR,\n                payload: {\n                  msg: _context3.t0.response.statusText,\n                  status: _context3.t0.response.status\n                }\n              });\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 7]]);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/Maliha/Desktop/Udemy Courses/Brad Traversy/DevConnector/client/src/actions/post.js"],"names":["axios","GET_POSTS","POST_ERROR","UPDATE_LIKES","setAlert","getPosts","dispatch","get","res","type","payload","data","msg","response","statusText","status","removeLike","postid","put","id","likes","addLike"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,QAAoD,kBAApD;AACA,SAASC,QAAT,QAAyB,SAAzB,C,CAEA;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA,wEAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAERN,KAAK,CAACO,GAAN,CAAU,WAAV,CAFQ;;AAAA;AAEpBC,cAAAA,GAFoB;AAG1BF,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAER,SADC;AAEPS,gBAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,eAAD,CAAR;AAH0B;AAAA;;AAAA;AAAA;AAAA;AAQ1BL,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAEP,UADC;AAEPQ,gBAAAA,OAAO,EAAE;AAAEE,kBAAAA,GAAG,EAAE,YAAMC,QAAN,CAAeC,UAAtB;AAAkCC,kBAAAA,MAAM,EAAE,YAAMF,QAAN,CAAeE;AAAzD;AAFF,eAAD,CAAR;;AAR0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB,C,CAeP;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,MAAM;AAAA;AAAA,yEAAI,kBAAMX,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEdN,KAAK,CAACkB,GAAN,4BAA8BD,MAA9B,EAFc;;AAAA;AAE1BT,cAAAA,GAF0B;AAGhCF,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAEN,YADC;AAEPO,gBAAAA,OAAO,EAAE;AAAES,kBAAAA,EAAE,EAAFA,EAAF;AAAMC,kBAAAA,KAAK,EAAEZ,GAAG,CAACG;AAAjB;AAFF,eAAD,CAAR;AAHgC;AAAA;;AAAA;AAAA;AAAA;AAQhCL,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAEP,UADC;AAEPQ,gBAAAA,OAAO,EAAE;AAAEE,kBAAAA,GAAG,EAAE,aAAMC,QAAN,CAAeC,UAAtB;AAAkCC,kBAAAA,MAAM,EAAE,aAAMF,QAAN,CAAeE;AAAzD;AAFF,eAAD,CAAR;;AARgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,C,CAeP;;AACA,OAAO,IAAMM,OAAO,GAAG,SAAVA,OAAU,CAAAJ,MAAM;AAAA;AAAA,yEAAI,kBAAMX,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEXN,KAAK,CAACkB,GAAN,0BAA4BD,MAA5B,EAFW;;AAAA;AAEvBT,cAAAA,GAFuB;AAG7BF,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAEN,YADC;AAEPO,gBAAAA,OAAO,EAAE;AAAES,kBAAAA,EAAE,EAAFA,EAAF;AAAMC,kBAAAA,KAAK,EAAEZ,GAAG,CAACG;AAAjB;AAFF,eAAD,CAAR;AAH6B;AAAA;;AAAA;AAAA;AAAA;AAQ7BL,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAEP,UADC;AAEPQ,gBAAAA,OAAO,EAAE;AAAEE,kBAAAA,GAAG,EAAE,aAAMC,QAAN,CAAeC,UAAtB;AAAkCC,kBAAAA,MAAM,EAAE,aAAMF,QAAN,CAAeE;AAAzD;AAFF,eAAD,CAAR;;AAR6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB","sourcesContent":["import axios from 'axios';\r\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES } from '../actions/types';\r\nimport { setAlert } from './alert';\r\n\r\n// Get posts\r\nexport const getPosts = () => async dispatch => {\r\n  try {\r\n    const res = await axios.get('/api/post'); \r\n    dispatch({\r\n      type: GET_POSTS,\r\n      payload: res.data\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: error.response.statusText, status: error.response.status}\r\n    })\r\n  }\r\n}\r\n\r\n// Remove Like\r\nexport const removeLike = postid => async dispatch => {\r\n  try {\r\n    const res = await axios.put(`/api/post/unlike/${postid}`); \r\n    dispatch({\r\n      type: UPDATE_LIKES,\r\n      payload: { id, likes: res.data }\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: error.response.statusText, status: error.response.status}\r\n    })\r\n  }\r\n}\r\n\r\n// Add Like\r\nexport const addLike = postid => async dispatch => {\r\n  try {\r\n    const res = await axios.put(`/api/post/like/${postid}`); \r\n    dispatch({\r\n      type: UPDATE_LIKES,\r\n      payload: { id, likes: res.data }\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: error.response.statusText, status: error.response.status}\r\n    })\r\n  }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}